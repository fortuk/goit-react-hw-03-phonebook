{"version":3,"sources":["components/Filter/Filter.module.css","components/App/App.module.css","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","index.js"],"names":["module","exports","initialState","name","number","ContactForm","state","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","addContact","reset","onSubmit","this","className","s","form","label","htmlFor","nameInputId","input","type","id","onChange","pattern","title","required","numberInputId","button","React","Component","ContactList","contacts","onDeleteContact","contactList","map","item","onClick","Filter","App","filter","contact","some","toLowerCase","alert","prevState","shortid","generate","deleteContact","contactId","changeFilter","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","includes","visibleContacts","getFilteredContacts","container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c69796ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1HtPS\",\"label\":\"Filter_label__t_QP2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__sHKui\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2V9oB\",\"label\":\"ContactForm_label__2RB3T\",\"input\":\"ContactForm_input__Mfb2d\",\"button\":\"ContactForm_button__3j6oY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1KKXe\",\"item\":\"ContactList_item__3bHsy\",\"button\":\"ContactList_button__A0a-N\",\"name\":\"ContactList_name__3Rcad\",\"number\":\"ContactList_number__1DMpj\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass ContactForm extends React.Component {\r\n  state = { ...initialState };\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.addContact(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={s.form}>\r\n        <label className={s.label} htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            className={s.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            id={this.nameInputId}\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={s.label} htmlFor={this.numberInputId}>\r\n          Number\r\n          <input\r\n            className={s.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            id={this.numberInputId}\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button className={s.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <ul className={s.contactList}>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li key={id} className={s.item}>\r\n        <p className={s.name}>{name}</p>\r\n        <p className={s.number}>{number}</p>\r\n        <button className={s.button} onClick={() => onDeleteContact(id)}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className={s.label}>\r\n    Find contacts by name\r\n    <input\r\n      className={s.input}\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\nimport shortid from 'shortid';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\nimport ContactsList from '../ContactList/ContactList';\r\nimport Filter from '../Filter/Filter';\r\nimport s from './App.module.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    contacts: [\r\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n    filter: '',\r\n  };\r\n\r\n  #localstorageKey = 'contacts';\r\n\r\n  componentDidMount() {\r\n    const contacts = localStorage.getItem(this.#localstorageKey);\r\n    const parsedContacts = JSON.parse(contacts);\r\n    if (parsedContacts) {\r\n      this.setState({ contacts: parsedContacts });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.contacts !== prevState.contacts) {\r\n      localStorage.setItem(\r\n        this.#localstorageKey,\r\n        JSON.stringify(this.state.contacts),\r\n      );\r\n    }\r\n  }\r\n\r\n  addContact = contact => {\r\n    const duplicateContact = this.state.contacts.some(\r\n      item => item.name.toLowerCase() === contact.name.toLowerCase(),\r\n    );\r\n\r\n    if (duplicateContact) {\r\n      alert('This contact is already exist!! Try one more time, please!');\r\n      return;\r\n    }\r\n    this.setState(prevState => ({\r\n      contacts: [...prevState.contacts, { ...contact, id: shortid.generate() }],\r\n    }));\r\n  };\r\n\r\n  deleteContact = contactId => {\r\n    this.setState(prevState => ({\r\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n    }));\r\n  };\r\n\r\n  changeFilter = event => {\r\n    this.setState({ filter: event.currentTarget.value });\r\n  };\r\n\r\n  getFilteredContacts() {\r\n    return this.state.contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(this.state.filter.toLowerCase()),\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { filter } = this.state;\r\n    const visibleContacts = this.getFilteredContacts();\r\n\r\n    return (\r\n      <div className={s.container}>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm addContact={this.addContact} />\r\n\r\n        <h2>Contacts</h2>\r\n        <Filter value={filter} onChange={this.changeFilter} />\r\n        <ContactsList\r\n          contacts={visibleContacts}\r\n          onDeleteContact={this.deleteContact}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from '../src/components/App/App';\r\n\r\nReactDOM.render( <\r\n    React.StrictMode >\r\n    <\r\n    App / >\r\n    <\r\n    /React.StrictMode>,\r\n    document.getElementById('root'),\r\n);"],"sourceRoot":""}